# Use an Ubuntu 18.04 base for our staging server
FROM vm/ubuntu:18.04

# Set non-interactive installation mode
ENV DEBIAN_FRONTEND=noninteractive

# Install Python and necessary tools
RUN apt-get update && apt-get install -y python3 curl

# Install Node.js 16.x which is compatible with Puppeteer
RUN curl -sL https://deb.nodesource.com/setup_16.x | bash - && \
    apt-get install -y nodejs

# Install libraries needed for Puppeteer to run in a headless environment
RUN apt-get install -y wget --no-install-recommends && \
    apt-get install -y libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxi6 \
    libxtst6 libcups2 libxss1 libxrandr2 libasound2 libpangocairo-1.0-0 libatk1.0-0 \
    libatk-bridge2.0-0 libgtk-3-0 libnss3 libgbm-dev

# Setup the working directory
WORKDIR /var/www/html

# Copy the repository contents to the correct directory
COPY . /var/www/html

# Install Puppeteer locally in the project directory
RUN npm install puppeteer

# Start a simple Python web server in the background
RUN python3 -m http.server 80 &

# Wait for the server to start before running the Puppeteer script
RUN sleep 5

# Run the image load test script with no-sandbox option for Puppeteer
RUN node -e "const puppeteer = require('puppeteer'); \
    (async () => { \
        const browser = await puppeteer.launch({ args: ['--no-sandbox'] }); \
        const page = await browser.newPage(); \
        await page.goto('http://localhost:80'); \
        const images = await page.evaluate(() => { \
            const imgs = Array.from(document.querySelectorAll('img')); \
            return imgs.map(img => ({ \
                src: img.src, \
                loaded: img.complete && img.naturalHeight !== 0 \
            })); \
        }); \
        console.log('Image Load Test Results:'); \
        images.forEach(img => { \
            console.log(img.src + ' - Loaded: ' + img.loaded); \
        }); \
        await browser.close(); \
        const allLoaded = images.every(img => img.loaded); \
        if (!allLoaded) { \
            throw new Error('One or more images failed to load.'); \
        } \
    })().catch(error => { \
        console.error(error); \
        process.exit(1); \
    });"

# Add link test script with no-sandbox option for Puppeteer
RUN node -e "const puppeteer = require('puppeteer'); \
    (async () => { \
        const browser = await puppeteer.launch({ args: ['--no-sandbox'] }); \
        const page = await browser.newPage(); \
        await page.goto('http://localhost:80'); \
        const links = await page.evaluate(() => { \
            return Array.from(document.querySelectorAll('a')).map(a => a.href); \
        }); \
        console.log('Link Test Results:'); \
        for (const link of links) { \
            try { \
                const response = await page.goto(link); \
                console.log(link + ' - Status: ' + response.status()); \
                if (response.status() >= 400) { \
                    throw new Error(link + ' returned status ' + response.status()); \
                } \
            } catch (error) { \
                console.error('Error with link ' + link + ': ' + error.message); \
                throw error; \
            } \
        } \
        await browser.close(); \
    })().catch(error => { \
        console.error(error); \
        process.exit(1); \
    });"

# Expose port 80 for the web server
EXPOSE WEBSITE 80

# Add debugging step to log page content
RUN node -e "const puppeteer = require('puppeteer'); \
    (async () => { \
        const browser = await puppeteer.launch({ args: ['--no-sandbox'] }); \
        const page = await browser.newPage(); \
        await page.goto('http://localhost:80'); \
        const pageContent = await page.content(); \
        console.log('Page Content:', pageContent); \
        await browser.close(); \
    })().catch(error => { \
        console.error(error); \
        process.exit(1); \
    });"
